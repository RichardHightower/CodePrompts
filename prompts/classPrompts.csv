"prompt","completion"
"How is class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV declared? ###-->"," public class Java2CSV { /* the rest ... */ } ###END"
"How is class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV defined? ###-->"," public class Java2CSV {

    /**
     * Extracts the field name from a FieldDeclaration.
     *
     * @param field the input field
     * @return the field name
     */
    private static String fieldName(FieldDeclaration field) {
        final Optional<VariableDeclarator> variableDeclarator = field.getChildNodes().stream().filter(node -> node instanceof VariableDeclarator).map(n -> (VariableDeclarator) n).findFirst();
        return variableDeclarator.map(NodeWithSimpleName::getNameAsString).orElse(""NO_NAME"");
    }

    /**
     * Returns a small definition of the given text by keeping only the first line and replacing the rest with a placeholder.
     *
     * @param text the input text
     * @return the small definition
     */
    private static String getSmallDefinition(String text) {
        // Split the string into an array of lines
        String[] lines = text.split(""\{"");
        return lines[0] + ""{ /* the rest ... */ }"";
    }

    /**
     * Returns the definition of the given object's body with a maximum number of lines.
     * If the number of lines exceeds the maximum, an empty string is returned.
     *
     * @param n            the object
     * @param numLinesMax  the maximum number of lines
     * @return the body definition
     */
    private static String getBodyDefinition(Object n, int numLinesMax) {
        String[] lines = n.toString().split(""n"");
        if (lines.length > numLinesMax) {
            int count = 0;
            StringBuilder builder = new StringBuilder(lines.length * 20);
            for (String line : lines) {
                builder.append(line).append('n');
                count++;
                if (count >= 200) {
                    break;
                }
            }
            return builder.toString();
        } else {
            return n.toString();
        }
    }

    /**
     * Entry point of the program.
     *
     * @param args the command line arguments
     * @throws IOException if an I/O error occurs
     */
    public static void main(String[] args) throws IOException {
        try {
            final String directoryPath = args.length > 0 ? args[0] : ""."";
            final String outputFile = args.length > 1 ? args[1] : ""output.csv"";
            File dir = new File(directoryPath).getCanonicalFile();
            if (dir.exists() && dir.isDirectory()) {
                List<Item> items = scanDirectory(dir);
                List<List<String>> lines = items.stream().map(Item::row).collect(Collectors.toList());
                try (CSVWriter writer = new CSVWriter(new FileWriter(outputFile))) {
                    writer.writeNext(Item.headers().toArray(new String[0]));
                    for (List<String> line : lines) {
                        writer.writeNext(line.toArray(new String[0]));
                    }
                }
            } else {
                System.out.printf(""Directory does not exist %s or is not a directory"", dir);
            }
        } catch (Exception ex) {
            ex.printStackTrace();
        }
    }

    /**
     * Scans the given directory and returns a list of items representing the Java code.
     *
     * @param directoryPath the directory path
     * @return the list of items
     * @throws IOException if an I/O error occurs
     */
    private static List<Item> scanDirectory(File directoryPath) throws IOException {
        List<Item> items = new ArrayList<>(32);
        try (Stream<Path> walk = Files.walk(directoryPath.toPath())) {
            walk.filter(Files::isRegularFile).filter(p -> p.toString().endsWith("".java"")).forEach(p -> parseFile(p.toFile(), items));
        } catch (IOException e) {
            // Handle the IOException if an error occurs while scanning the directory
            System.err.println(""An error occurred while scanning the directory: "" + e.getMessage());
            throw e;
        }
        return items;
    }

    /**
     * Parses the given file and adds the parsed items to the list.
     *
     * @param file  the file to parse
     * @param items the list of items to add to
     */
    private static void parseFile(File file, List<Item> items) {
        try {
            CompilationUnit compilationUnit = StaticJavaParser.parse(file);
            compilationUnit.accept(new ClassVisitor(compilationUnit, items), null);
        } catch (IOException e) {
            e.printStackTrace();
        }
    }

    /**
     * Visitor for visiting classes, interfaces, and enums.
     */
    private static class ClassVisitor extends VoidVisitorAdapter<Void> {

        static Pattern JAVA_DOC_REGEX = Pattern.compile(""^/\*\*.*?\*/\s*"", Pattern.DOTALL);

        private final CompilationUnit compilationUnit;

        private final List<Item> items;

        public ClassVisitor(CompilationUnit compilationUnit, List<Item> items) {
            this.compilationUnit = compilationUnit;
            this.items = items;
        }

        /**
         * Extracts the Javadoc comment and method code from the given code.
         *
         * @param code the input code
         * @return an array containing the Javadoc comment and method code
         */
        public static String[] extractJavaDoc(String code) {
            // Define the regular expression pattern to match Javadoc comments
            Matcher matcher = JAVA_DOC_REGEX.matcher(code);
            if (matcher.find()) {
                // Extract the Javadoc comment
                String javadoc = matcher.group();
                // Extract the method code
                String methodCode = code.substring(matcher.end());
                return new String[] { javadoc, methodCode };
            } else {
                // No Javadoc found
                return new String[] { """", code };
            }
        }

        @Override
        public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
            if (!cls.isInnerClass() && !cls.isStatic()) {
                visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""n"")), cls);
            }
            super.visit(cls, arg);
        }

        /**
         * Visits a class or interface.
         *
         * @param packageName the package name
         * @param importBody  the import statements
         * @param cls         the class or interface
         */
        public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
            final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
            final String javaDoc = parts[0];
            final String code = parts[1];
            Item item = Item.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
            items.add(item);
            //           System.out.println(item);
            cls.getChildNodes().stream().filter(n -> n instanceof ClassOrInterfaceDeclaration).forEach(clsInner -> visitClassType(packageName, importBody, item, (ClassOrInterfaceDeclaration) clsInner));
            cls.getMethods().forEach(method -> visitMethod(item, method));
            cls.getFields().forEach(field -> visitField(item, field));
        }

        /**
         * Visits a class or interface type.
         *
         * @param packageName the package name
         * @param importBody  the import statements
         * @param parent      the parent item
         * @param cls         the class or interface type
         */
        private void visitClassType(String packageName, String importBody, Item parent, ClassOrInterfaceDeclaration cls) {
            final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
            final String javaDoc = parts[0];
            final String code = parts[1];
            Item item = Item.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
            items.add(item);
            //System.out.println(item);
        }

        /**
         * Visits a field.
         *
 ###END"
"What does class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV do according to the JavaDoc? ###-->"," /**
 * Parse Java files and turn them into CSV files.
 */
 ###END"
"What are the inner classes defined inside of class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static class ClassVisitor extends VoidVisitorAdapter<Void> { /* the rest ... */ } ###END"
"How is class named ClassVisitor whose fully qualified class name com.cloudurable.java2csv.Java2CSV.ClassVisitor declared? ###-->"," private static class ClassVisitor extends VoidVisitorAdapter<Void> { /* the rest ... */ } ###END"
"How is class named ClassVisitor whose fully qualified class name com.cloudurable.java2csv.Java2CSV.ClassVisitor defined? ###-->"," private static class ClassVisitor extends VoidVisitorAdapter<Void> {

    static Pattern JAVA_DOC_REGEX = Pattern.compile(""^/\*\*.*?\*/\s*"", Pattern.DOTALL);

    private final CompilationUnit compilationUnit;

    private final List<Item> items;

    public ClassVisitor(CompilationUnit compilationUnit, List<Item> items) {
        this.compilationUnit = compilationUnit;
        this.items = items;
    }

    /**
     * Extracts the Javadoc comment and method code from the given code.
     *
     * @param code the input code
     * @return an array containing the Javadoc comment and method code
     */
    public static String[] extractJavaDoc(String code) {
        // Define the regular expression pattern to match Javadoc comments
        Matcher matcher = JAVA_DOC_REGEX.matcher(code);
        if (matcher.find()) {
            // Extract the Javadoc comment
            String javadoc = matcher.group();
            // Extract the method code
            String methodCode = code.substring(matcher.end());
            return new String[] { javadoc, methodCode };
        } else {
            // No Javadoc found
            return new String[] { """", code };
        }
    }

    @Override
    public void visit(ClassOrInterfaceDeclaration cls, Void arg) {
        if (!cls.isInnerClass() && !cls.isStatic()) {
            visitClass(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""n"")), cls);
        }
        super.visit(cls, arg);
    }

    /**
     * Visits a class or interface.
     *
     * @param packageName the package name
     * @param importBody  the import statements
     * @param cls         the class or interface
     */
    public void visitClass(String packageName, String importBody, ClassOrInterfaceDeclaration cls) {
        final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
        final String javaDoc = parts[0];
        final String code = parts[1];
        Item item = Item.builder().importBody(importBody).type(cls.isInterface() ? JavaItemType.INTERFACE : JavaItemType.CLASS).name(packageName + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
        items.add(item);
        //           System.out.println(item);
        cls.getChildNodes().stream().filter(n -> n instanceof ClassOrInterfaceDeclaration).forEach(clsInner -> visitClassType(packageName, importBody, item, (ClassOrInterfaceDeclaration) clsInner));
        cls.getMethods().forEach(method -> visitMethod(item, method));
        cls.getFields().forEach(field -> visitField(item, field));
    }

    /**
     * Visits a class or interface type.
     *
     * @param packageName the package name
     * @param importBody  the import statements
     * @param parent      the parent item
     * @param cls         the class or interface type
     */
    private void visitClassType(String packageName, String importBody, Item parent, ClassOrInterfaceDeclaration cls) {
        final String[] parts = extractJavaDoc(getBodyDefinition(cls, 200));
        final String javaDoc = parts[0];
        final String code = parts[1];
        Item item = Item.builder().importBody(importBody).type(JavaItemType.CLASS).name(parent.getName() + ""."" + cls.getNameAsString()).simpleName(cls.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
        items.add(item);
        //System.out.println(item);
    }

    /**
     * Visits a field.
     *
     * @param parent the parent item
     * @param field  the field
     */
    private void visitField(Item parent, FieldDeclaration field) {
        final String[] parts = extractJavaDoc(field.toString());
        final String javaDoc = parts[0];
        final String code = parts[1];
        Item item = Item.builder().type(JavaItemType.FIELD).name(parent.getName() + ""."" + fieldName(field)).simpleName(fieldName(field)).definition(code).javadoc(javaDoc).parent(parent).build();
        items.add(item);
        //System.out.println(item);
    }

    /**
     * Visits a method.
     *
     * @param parent the parent item
     * @param method the method
     */
    public void visitMethod(Item parent, final MethodDeclaration method) {
        String[] parts = extractJavaDoc(getBodyDefinition(method, 500));
        final String javaDoc = parts[0];
        final String code = parts[1];
        Item item = Item.builder().type(JavaItemType.METHOD).name(parent.getName() + ""."" + method.getName()).simpleName(method.getName().toString()).definition(getSmallDefinition(code)).javadoc(javaDoc).parent(parent).body(code).build();
        items.add(item);
        //System.out.println(item);
    }

    @Override
    public void visit(EnumDeclaration n, Void arg) {
        visitEnum(compilationUnit.getPackageDeclaration().map(NodeWithName::getNameAsString).orElse(""""), compilationUnit.getImports().stream().map(Node::toString).collect(Collectors.joining(""n"")), n);
        super.visit(n, arg);
    }

    /**
     * Visits an enum.
     *
     * @param packageName the package name
     * @param importBody  the import statements
     * @param enumD       the enum
     */
    private void visitEnum(String packageName, String importBody, EnumDeclaration enumD) {
        String[] parts = extractJavaDoc(getBodyDefinition(enumD, 200));
        final String javaDoc = parts[0];
        final String code = parts[1];
        Item item = Item.builder().importBody(importBody).type(JavaItemType.ENUM).name(packageName + ""."" + enumD.getNameAsString()).simpleName(enumD.getNameAsString()).definition(getSmallDefinition(code)).javadoc(javaDoc).body(code).build();
        items.add(item);
        //System.out.println(item);
        enumD.getMethods().forEach(method -> visitMethod(item, method));
        enumD.getFields().forEach(field -> visitField(item, field));
    }
} ###END"
"What does class named ClassVisitor whose fully qualified class name com.cloudurable.java2csv.Java2CSV.ClassVisitor do according to the JavaDoc? ###-->"," /**
 * Visitor for visiting classes, interfaces, and enums.
 */
 ###END"
"What are the imports for class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," import com.github.javaparser.StaticJavaParser;

import com.github.javaparser.ast.CompilationUnit;

import com.github.javaparser.ast.Node;

import com.github.javaparser.ast.body.*;

import com.github.javaparser.ast.nodeTypes.NodeWithName;

import com.github.javaparser.ast.nodeTypes.NodeWithSimpleName;

import com.github.javaparser.ast.type.ClassOrInterfaceType;

import com.github.javaparser.ast.visitor.VoidVisitorAdapter;

import com.opencsv.CSVWriter;

import java.io.File;

import java.io.FileWriter;

import java.io.IOException;

import java.nio.file.Files;

import java.nio.file.Path;

import java.util.ArrayList;

import java.util.List;

import java.util.Optional;

import java.util.regex.Matcher;

import java.util.regex.Pattern;

import java.util.stream.Collectors;

import java.util.stream.Stream;
 ###END"
"What methods does class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV have? ###-->"," private static String fieldName(FieldDeclaration field) { /* the rest ... */ }
private static String getSmallDefinition(String text) { /* the rest ... */ }
private static String getBodyDefinition(Object n, int numLinesMax) { /* the rest ... */ }
public static void main(String[] args) throws IOException { /* the rest ... */ }
private static List<Item> scanDirectory(File directoryPath) throws IOException { /* the rest ... */ }
private static void parseFile(File file, List<Item> items) { /* the rest ... */ } ###END"
"What does method fieldName do according to the JavaDoc from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," /**
 * Extracts the field name from a FieldDeclaration.
 *
 * @param field the input field
 * @return the field name
 */
 ###END"
"How is method fieldName defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static String fieldName(FieldDeclaration field) {
    final Optional<VariableDeclarator> variableDeclarator = field.getChildNodes().stream().filter(node -> node instanceof VariableDeclarator).map(n -> (VariableDeclarator) n).findFirst();
    return variableDeclarator.map(NodeWithSimpleName::getNameAsString).orElse(""NO_NAME"");
} ###END"
"What is the method fieldName signature from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static String fieldName(FieldDeclaration field) { /* the rest ... */ } ###END"
"What does method getSmallDefinition do according to the JavaDoc from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," /**
 * Returns a small definition of the given text by keeping only the first line and replacing the rest with a placeholder.
 *
 * @param text the input text
 * @return the small definition
 */
 ###END"
"How is method getSmallDefinition defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static String getSmallDefinition(String text) {
    // Split the string into an array of lines
    String[] lines = text.split(""\{"");
    return lines[0] + ""{ /* the rest ... */ }"";
} ###END"
"What is the method getSmallDefinition signature from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static String getSmallDefinition(String text) { /* the rest ... */ } ###END"
"What does method getBodyDefinition do according to the JavaDoc from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," /**
 * Returns the definition of the given object's body with a maximum number of lines.
 * If the number of lines exceeds the maximum, an empty string is returned.
 *
 * @param n            the object
 * @param numLinesMax  the maximum number of lines
 * @return the body definition
 */
 ###END"
"How is method getBodyDefinition defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static String getBodyDefinition(Object n, int numLinesMax) {
    String[] lines = n.toString().split(""n"");
    if (lines.length > numLinesMax) {
        int count = 0;
        StringBuilder builder = new StringBuilder(lines.length * 20);
        for (String line : lines) {
            builder.append(line).append('n');
            count++;
            if (count >= 200) {
                break;
            }
        }
        return builder.toString();
    } else {
        return n.toString();
    }
} ###END"
"What is the method getBodyDefinition signature from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static String getBodyDefinition(Object n, int numLinesMax) { /* the rest ... */ } ###END"
"What does method main do according to the JavaDoc from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," /**
 * Entry point of the program.
 *
 * @param args the command line arguments
 * @throws IOException if an I/O error occurs
 */
 ###END"
"How is method main defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," public static void main(String[] args) throws IOException {
    try {
        final String directoryPath = args.length > 0 ? args[0] : ""."";
        final String outputFile = args.length > 1 ? args[1] : ""output.csv"";
        File dir = new File(directoryPath).getCanonicalFile();
        if (dir.exists() && dir.isDirectory()) {
            List<Item> items = scanDirectory(dir);
            List<List<String>> lines = items.stream().map(Item::row).collect(Collectors.toList());
            try (CSVWriter writer = new CSVWriter(new FileWriter(outputFile))) {
                writer.writeNext(Item.headers().toArray(new String[0]));
                for (List<String> line : lines) {
                    writer.writeNext(line.toArray(new String[0]));
                }
            }
        } else {
            System.out.printf(""Directory does not exist %s or is not a directory"", dir);
        }
    } catch (Exception ex) {
        ex.printStackTrace();
    }
} ###END"
"What is the method main signature from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," public static void main(String[] args) throws IOException { /* the rest ... */ } ###END"
"What does method scanDirectory do according to the JavaDoc from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," /**
 * Scans the given directory and returns a list of items representing the Java code.
 *
 * @param directoryPath the directory path
 * @return the list of items
 * @throws IOException if an I/O error occurs
 */
 ###END"
"How is method scanDirectory defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static List<Item> scanDirectory(File directoryPath) throws IOException {
    List<Item> items = new ArrayList<>(32);
    try (Stream<Path> walk = Files.walk(directoryPath.toPath())) {
        walk.filter(Files::isRegularFile).filter(p -> p.toString().endsWith("".java"")).forEach(p -> parseFile(p.toFile(), items));
    } catch (IOException e) {
        // Handle the IOException if an error occurs while scanning the directory
        System.err.println(""An error occurred while scanning the directory: "" + e.getMessage());
        throw e;
    }
    return items;
} ###END"
"What is the method scanDirectory signature from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static List<Item> scanDirectory(File directoryPath) throws IOException { /* the rest ... */ } ###END"
"What does method parseFile do according to the JavaDoc from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," /**
 * Parses the given file and adds the parsed items to the list.
 *
 * @param file  the file to parse
 * @param items the list of items to add to
 */
 ###END"
"How is method parseFile defined from class class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static void parseFile(File file, List<Item> items) {
    try {
        CompilationUnit compilationUnit = StaticJavaParser.parse(file);
        compilationUnit.accept(new ClassVisitor(compilationUnit, items), null);
    } catch (IOException e) {
        e.printStackTrace();
    }
} ###END"
"What is the method parseFile signature from class named Java2CSV whose fully qualified class name com.cloudurable.java2csv.Java2CSV? ###-->"," private static void parseFile(File file, List<Item> items) { /* the rest ... */ } ###END"
"How is class named Item whose fully qualified class name com.cloudurable.java2csv.Item declared? ###-->"," public class Item { /* the rest ... */ } ###END"
"How is class named Item whose fully qualified class name com.cloudurable.java2csv.Item defined? ###-->"," public class Item {

    /**
     * Import body, the imports for the class.
     */
    private final String importBody;

    /**
     *  Code body, the whole code for the item.
     */
    private final String body;

    /**
     *  JavaDoc, the javadoc for the item.
     */
    private final String javadoc;

    private final String name;

    private final String simpleName;

    private final String definition;

    private final Item parent;

    private final JavaItemType type;

    /**
     * Constructs a new Item.
     *
     * @param importBody  the import statements associated with the item
     * @param body        the source code body of the item
     * @param javadoc     the Javadoc documentation of the item
     * @param name        the fully qualified name of the item
     * @param simpleName  the simple name of the item
     * @param definition  the definition of the item
     * @param parent      the parent item of the current item (e.g., for inner classes)
     * @param type        the type of the item (e.g., class, method, field)
     */
    public Item(String importBody, String body, String javadoc, String name, String simpleName, String definition, Item parent, JavaItemType type) {
        this.importBody = orEmptyString(importBody);
        this.body = orEmptyString(body);
        this.javadoc = orEmptyString(javadoc);
        this.name = orEmptyString(name);
        this.simpleName = orEmptyString(simpleName);
        this.definition = orEmptyString(definition);
        this.parent = parent;
        this.type = type;
    }

    /**
     * Returns the column headers for the CSV representation of an Item.
     *
     * @return the column headers
     */
    public static List<String> headers() {
        return List.of(""Name"", ""Type"", ""FullName"", ""Definition"", ""JavaDoc"", ""Parent"", ""Imports"", ""Body"");
    }

    /**
     * Returns a builder to construct an Item.
     *
     * @return the Item builder
     */
    public static Builder builder() {
        return new Builder();
    }

    private String orEmptyString(String part) {
        return part == null ? """" : part;
    }

    /**
     * Returns a row representing the Item for the CSV output.
     *
     * @return the row representing the Item
     */
    public List<String> row() {
        return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : """", importBody, body);
    }

    /**
     * Returns the import statements associated with the item.
     *
     * @return the import statements
     */
    public String getImportBody() {
        return importBody;
    }

    /**
     * Returns the source code body of the item.
     *
     * @return the source code body
     */
    public String getBody() {
        return body;
    }

    /**
     * Returns the Javadoc documentation of the item.
     *
     * @return the Javadoc documentation
     */
    public String getJavadoc() {
        return javadoc;
    }

    /**
     * Returns the fully qualified name of the item.
     *
     * @return the fully qualified name
     */
    public String getName() {
        return name;
    }

    /**
     * Returns the definition of the item.
     *
     * @return the definition
     */
    public String getDefinition() {
        return definition;
    }

    /**
     * Returns the parent item of the current item.
     *
     * @return the parent item
     */
    public Item getParent() {
        return parent;
    }

    /**
     * Returns the type of the item.
     *
     * @return the item type
     */
    public JavaItemType getType() {
        return type;
    }

    @Override
    public String toString() {
        return ""Item{"" + ""simpleName='"" + simpleName + ''' + "", type="" + type + "", name='"" + name + ''' + "", definition='"" + definition + ''' + "", parent="" + parent + "", importBody='"" + importBody + ''' + "", javadoc='"" + javadoc + ''' + "", body='"" + body + ''' + '}';
    }

    /**
     * Builder class for constructing an Item.
     */
    public static class Builder {

        private String body;

        private String javadoc;

        private String name;

        private String definition;

        private Item parent;

        private String importBody;

        private String simpleName;

        private JavaItemType type;

        private Builder() {
        }

        public Builder simpleName(String simpleName) {
            this.simpleName = simpleName;
            return this;
        }

        public Builder type(JavaItemType type) {
            this.type = type;
            return this;
        }

        public Builder importBody(String importBody) {
            this.importBody = importBody;
            return this;
        }

        public Builder body(String body) {
            this.body = body;
            return this;
        }

        public Builder javadoc(String javadoc) {
            this.javadoc = javadoc;
            return this;
        }
 ###END"
"What does class named Item whose fully qualified class name com.cloudurable.java2csv.Item do according to the JavaDoc? ###-->"," /**
 * Represents an item in Java code, such as a class, method, or field.
 */
 ###END"
"What are the inner classes defined inside of class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public static class Builder { /* the rest ... */ } ###END"
"How is class named Builder whose fully qualified class name com.cloudurable.java2csv.Item.Builder declared? ###-->"," public static class Builder { /* the rest ... */ } ###END"
"How is class named Builder whose fully qualified class name com.cloudurable.java2csv.Item.Builder defined? ###-->"," public static class Builder {

    private String body;

    private String javadoc;

    private String name;

    private String definition;

    private Item parent;

    private String importBody;

    private String simpleName;

    private JavaItemType type;

    private Builder() {
    }

    public Builder simpleName(String simpleName) {
        this.simpleName = simpleName;
        return this;
    }

    public Builder type(JavaItemType type) {
        this.type = type;
        return this;
    }

    public Builder importBody(String importBody) {
        this.importBody = importBody;
        return this;
    }

    public Builder body(String body) {
        this.body = body;
        return this;
    }

    public Builder javadoc(String javadoc) {
        this.javadoc = javadoc;
        return this;
    }

    public Builder name(String name) {
        this.name = name;
        return this;
    }

    public Builder definition(String definition) {
        this.definition = definition;
        return this;
    }

    public Builder parent(Item parent) {
        this.parent = parent;
        return this;
    }

    /**
     * Builds and returns the Item.
     *
     * @return the constructed Item
     */
    public Item build() {
        return new Item(importBody, body, javadoc, name, simpleName, definition, parent, type);
    }
} ###END"
"What does class named Builder whose fully qualified class name com.cloudurable.java2csv.Item.Builder do according to the JavaDoc? ###-->"," /**
 * Builder class for constructing an Item.
 */
 ###END"
"What are the imports for class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," import java.util.List;
 ###END"
"What methods does class named Item whose fully qualified class name com.cloudurable.java2csv.Item have? ###-->"," public static List<String> headers() { /* the rest ... */ }
public static Builder builder() { /* the rest ... */ }
private String orEmptyString(String part) { /* the rest ... */ }
public List<String> row() { /* the rest ... */ }
public String getImportBody() { /* the rest ... */ }
public String getBody() { /* the rest ... */ }
public String getJavadoc() { /* the rest ... */ }
public String getName() { /* the rest ... */ }
public String getDefinition() { /* the rest ... */ }
public Item getParent() { /* the rest ... */ }
public JavaItemType getType() { /* the rest ... */ }
@Override
public String toString() { /* the rest ... */ } ###END"
"What does method headers do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the column headers for the CSV representation of an Item.
 *
 * @return the column headers
 */
 ###END"
"How is method headers defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public static List<String> headers() {
    return List.of(""Name"", ""Type"", ""FullName"", ""Definition"", ""JavaDoc"", ""Parent"", ""Imports"", ""Body"");
} ###END"
"What is the method headers signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public static List<String> headers() { /* the rest ... */ } ###END"
"What does method builder do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns a builder to construct an Item.
 *
 * @return the Item builder
 */
 ###END"
"How is method builder defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public static Builder builder() {
    return new Builder();
} ###END"
"What is the method builder signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public static Builder builder() { /* the rest ... */ } ###END"
"How is method orEmptyString defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private String orEmptyString(String part) {
    return part == null ? """" : part;
} ###END"
"What is the method orEmptyString signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private String orEmptyString(String part) { /* the rest ... */ } ###END"
"What does method row do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns a row representing the Item for the CSV output.
 *
 * @return the row representing the Item
 */
 ###END"
"How is method row defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public List<String> row() {
    return List.of(simpleName, type.toString().toLowerCase(), name, definition, javadoc, parent != null ? parent.getName() : """", importBody, body);
} ###END"
"What is the method row signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public List<String> row() { /* the rest ... */ } ###END"
"What does method getImportBody do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the import statements associated with the item.
 *
 * @return the import statements
 */
 ###END"
"How is method getImportBody defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getImportBody() {
    return importBody;
} ###END"
"What is the method getImportBody signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getImportBody() { /* the rest ... */ } ###END"
"What does method getBody do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the source code body of the item.
 *
 * @return the source code body
 */
 ###END"
"How is method getBody defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getBody() {
    return body;
} ###END"
"What is the method getBody signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getBody() { /* the rest ... */ } ###END"
"What does method getJavadoc do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the Javadoc documentation of the item.
 *
 * @return the Javadoc documentation
 */
 ###END"
"How is method getJavadoc defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getJavadoc() {
    return javadoc;
} ###END"
"What is the method getJavadoc signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getJavadoc() { /* the rest ... */ } ###END"
"What does method getName do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the fully qualified name of the item.
 *
 * @return the fully qualified name
 */
 ###END"
"How is method getName defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getName() {
    return name;
} ###END"
"What is the method getName signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getName() { /* the rest ... */ } ###END"
"What does method getDefinition do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the definition of the item.
 *
 * @return the definition
 */
 ###END"
"How is method getDefinition defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getDefinition() {
    return definition;
} ###END"
"What is the method getDefinition signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public String getDefinition() { /* the rest ... */ } ###END"
"What does method getParent do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the parent item of the current item.
 *
 * @return the parent item
 */
 ###END"
"How is method getParent defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public Item getParent() {
    return parent;
} ###END"
"What is the method getParent signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public Item getParent() { /* the rest ... */ } ###END"
"What does method getType do according to the JavaDoc from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," /**
 * Returns the type of the item.
 *
 * @return the item type
 */
 ###END"
"How is method getType defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public JavaItemType getType() {
    return type;
} ###END"
"What is the method getType signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," public JavaItemType getType() { /* the rest ... */ } ###END"
"How is method toString defined from class class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," @Override
public String toString() {
    return ""Item{"" + ""simpleName='"" + simpleName + ''' + "", type="" + type + "", name='"" + name + ''' + "", definition='"" + definition + ''' + "", parent="" + parent + "", importBody='"" + importBody + ''' + "", javadoc='"" + javadoc + ''' + "", body='"" + body + ''' + '}';
} ###END"
"What is the method toString signature from class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," @Override
public String toString() { /* the rest ... */ } ###END"
"What fields does class named Item whose fully qualified class name com.cloudurable.java2csv.Item have? ###-->"," private final String importBody;
private final String body;
private final String javadoc;
private final String name;
private final String simpleName;
private final String definition;
private final Item parent;
private final JavaItemType type; ###END"
"What is the field importBody defined in class named Item whose fully qualified class name com.cloudurable.java2csv.Item according to the JavaDoc? ###-->"," /**
 * Import body, the imports for the class.
 */
 ###END"
"How is the field importBody defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final String importBody; ###END"
"What is the field body defined in class named Item whose fully qualified class name com.cloudurable.java2csv.Item according to the JavaDoc? ###-->"," /**
 *  Code body, the whole code for the item.
 */
 ###END"
"How is the field body defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final String body; ###END"
"What is the field javadoc defined in class named Item whose fully qualified class name com.cloudurable.java2csv.Item according to the JavaDoc? ###-->"," /**
 *  JavaDoc, the javadoc for the item.
 */
 ###END"
"How is the field javadoc defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final String javadoc; ###END"
"How is the field name defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final String name; ###END"
"How is the field simpleName defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final String simpleName; ###END"
"How is the field definition defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final String definition; ###END"
"How is the field parent defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final Item parent; ###END"
"How is the field type defined which is in class named Item whose fully qualified class name com.cloudurable.java2csv.Item? ###-->"," private final JavaItemType type; ###END"
